#!/usr/bin/env node

// require necessary modules
const app = require('../app');
const debug = require('debug')('on-your-time:server');
const http = require('http');

// get the port from the .env file
const port = normalizePort(process.env.SERVER_PORT);
app.set('port', port);

// create the http server
const server = http.createServer(app);

// configure the http server
server.on('listening', onListening);
server.on('error', onError);
server.listen(port);

// start listening for websocket connections
const io = require('../lib/socket-manager').listen(server);

// start listening for redis messages
require('../lib/subscription-manager').subscribe(io);

/**
 * Normalizes the port into a number, string, or false
 * @param  {Integer|String} val - The port to normalize
 * @return {Integer|String|Boolean}
 */
function normalizePort(val) {
    const port = parseInt(val, 10);
    return isNaN(port) ? val : (port > 0 ? port : false);
}

/**
 * Event listener for HTTP server "error" event.
 * Give a user friendly message for common errors,
 * otherwise throws the error normally.
 * @param {Error} err - A server error
 */
function onError(err) {
    const bind = typeof port === 'string' ? `Pipe ${port}` : `Port ${port}`;

    if (err.syscall === 'listen') {
        if (err.code === 'EACCES') {
            console.error(`${bind} requires elevated privileges`);
            process.exit(1);
        } else if (err.code === 'EADDRINUSE') {
            console.error(`${bind} is already in use`);
            process.exit(1);
        }
    }
    throw err;
}

/**
 * Event listener for HTTP server "listening" event.
 * Logs the server's port to the console
 */
function onListening() {
    const addr = server.address();
    const bind = typeof addr === 'string' ? `pipe ${addr}` : `port ${addr.port}`;
    debug('Listening on ' + bind);
}
